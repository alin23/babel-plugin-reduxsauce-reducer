{
  "version": 3,
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { constant, pascal } from \"change-case\"\n\nisReducer = (path) ->\n    path.node.params.length is 2 and\n    path.node.params[0].name is \"state\" and\n    (path.node.params[1].name is \"ctx\" or path.node.params[1].type is \"ObjectPattern\")\n\ngetActionsDefinition = (action) ->\n    action\n        .getAllPrevSiblings()\n        .find((path) ->\n            path.isExpressionStatement() and\n            path.get(\"expression\").isAssignmentExpression() and\n            path.node.expression.left.name is \"ACTIONS\")\n\ngetActionHandlersDefinition = (action) ->\n    action\n        .getAllNextSiblings()\n        .find((path) ->\n            path.isExpressionStatement() and\n            path.get(\"expression\").isAssignmentExpression() and\n            path.node.expression.left?.name is \"ACTION_HANDLERS\")\n\nglobals =\n    actionsDefinition: null\n    actionHandlersDefinition: null\n    prefix: null\n\nexport default ({ types: t, template }) ->\n    importCode = template(\n        \"\"\"\n        import { createActions, createReducer } from 'reduxsauce';\n        var ACTIONS, ACTION_HANDLERS, Creators, Types;\n        \"\"\"\n        sourceType: \"module\", placeholderPattern: false\n    )\n    exportCode = template(\n        \"\"\"\n        var ACTIONS = Creators;\n        export { Types as TYPES };\n        export default ACTIONS;\n        \"\"\"\n        sourceType: \"module\"\n    )\n    actionsCode = template(\n        \"\"\"\n        ACTIONS = {};\n        ({ Types, Creators } = createActions(ACTIONS, { prefix: PREFIX }));\n        \"\"\"\n        sourceType: \"module\", placeholderPattern: false\n    )\n\n    actionHandlersCode = template(\n        \"\"\"\n        ACTION_HANDLERS = {};\n        export var reducer = createReducer(INITIAL_STATE, ACTION_HANDLERS);\n        \"\"\"\n        sourceType: \"module\", placeholderPattern: false\n    )\n    actionCode = template(\n        \"\"\"\n        if (typeof ACTION_NAME == 'undefined') {\n            var ACTION_NAME = null;\n        }\n\n        ACTION_NAME = function(state, {STATE_PROP}) {\n            return Object.assign({}, state, {STATE_PROP})\n        };\n        \"\"\"\n        sourceType: \"module\"\n    )\n    visitor:\n        Program:\n            exit: (path) ->\n                if (\n                    not path\n                        .get(\"body\")\n                        .find((path) ->\n                            path.isExpressionStatement() and\n                            path.get(\"expression\").isAssignmentExpression() and\n                            path.node.expression.left.name is \"INITIAL_STATE\")\n                )\n                    return\n                path.get(\"body.0\").insertBefore(importCode())\n\n                prefix = pascal(globals.prefix.replace(\"/\", \"\"))\n                path.get(\"body.#{ path.node.body.length - 1 }\").insertAfter(\n                    exportCode(\n                        ACTIONS: t.identifier(\"#{ prefix }Actions\")\n                        TYPES: t.identifier(\"#{ prefix }Types\")\n                    )\n                )\n                return\n        AssignmentExpression: (path) ->\n            if path.node.left.name is \"PREFIX\"\n                globals.prefix = path.node.right.value\n\n            if (\n                path.node.left.name is \"INITIAL_STATE\" and\n                path.get(\"right\").isCallExpression() and\n                path.node.right.callee.name is \"Immutable\"\n            )\n                path.insertBefore(actionsCode())\n                globals.actionsDefinition = getActionsDefinition(path)\n                state = path.node.right.arguments[0].properties\n                for prop in state\n                    path.insertAfter(\n                        actionCode(\n                            ACTION_NAME: t.identifier(\"set#{ pascal(prop.key.name) }\")\n                            STATE_PROP: t.identifier(prop.key.name)\n                        )\n                    )\n            return\n        FunctionExpression: (path) ->\n            if not isReducer(path)\n                return\n\n            action = path.findParent((path) -> path.isExpressionStatement())\n            if not action?\n                return\n\n            actionName = action.node.expression.left.name\n            actionParams =\n                if path.node.params[1].name is \"ctx\"\n                    t.nullLiteral()\n                else\n                    t.arrayExpression(\n                        path.node.params[1].properties.map((prop) ->\n                            t.StringLiteral(prop.key.name))\n                    )\n\n            globals.actionsDefinition = getActionsDefinition(action)\n            globals.actionHandlersDefinition = getActionHandlersDefinition(action)\n\n            if globals.actionsDefinition?\n                actionProps = globals.actionsDefinition.node.expression.right.properties\n                if not actionProps.find((prop) -> prop.key.name is actionName)\n                    actionProps.push(t.objectProperty(t.identifier(actionName), actionParams))\n\n            if not globals.actionHandlersDefinition?\n                siblings = action.getAllNextSiblings()\n                lastAction = siblings[siblings.length - 1] ? action\n                lastAction.insertAfter(actionHandlersCode())\n                globals.actionHandlersDefinition = getActionHandlersDefinition(action)\n\n            handler = t.objectProperty(\n                t.templateLiteral(\n                    [\n                        t.templateElement({ raw: \"\", cooked: \"\" }, false)\n                        t.templateElement({ raw: \"\", cooked: \"\" }, true)\n                    ]\n                    [\n                        t.memberExpression(\n                            t.identifier(\"Types\")\n                            t.identifier(constant(actionName))\n                        )\n                    ]\n                )\n                t.identifier(actionName)\n                true\n            )\n\n            handlers = globals.actionHandlersDefinition.node.expression.right.properties\n            if not handlers?\n                globals.actionHandlersDefinition.node.expression.right.properties = [handler]\n            else if not handlers.find((prop) -> prop.value.name is actionName)\n                handlers.push(handler)\n\n            return\n"
  ],
  "sourceRoot": ""
}