'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function ({
  types: t,
  template
}) {
  var actionHandlersCode, actionsCode;
  actionsCode = template("import { createActions, createReducer } from 'reduxsauce';\n\nvar ACTIONS, ACTION_HANDLERS, Creators, Types;\n\nACTIONS = {};\n({ Types, Creators } = createActions(ACTIONS, { prefix: PREFIX }));\n\nexport { Types };\nexport default Creators;", {
    sourceType: 'module',
    placeholderPattern: false
  });
  actionHandlersCode = template("ACTION_HANDLERS = {};\nexport var reducer = createReducer(INITIAL_STATE, ACTION_HANDLERS);", {
    sourceType: 'module',
    placeholderPattern: false
  });
  return {
    visitor: {
      FunctionExpression: function (path) {
        var action, actionHandlersDefinition, actionName, actionObjectExpr, actionParams, actionsDefinition, lastAction, ref, siblings;
        if (!isReducer(path)) {
          return;
        }
        action = path.findParent(function (path) {
          return path.isExpressionStatement();
        });
        if (action == null) {
          return;
        }
        actionName = action.node.expression.left.name;
        actionParams = path.node.params[1].name === 'ctx' ? t.nullLiteral() : t.arrayExpression(path.node.params[1].properties.map(function (prop) {
          return t.StringLiteral(prop.key.name);
        }));
        actionsDefinition = getActionsDefinition(action);
        actionHandlersDefinition = getActionHandlersDefinition(action);
        if (actionsDefinition == null) {
          action.insertBefore(actionsCode());
          actionsDefinition = getActionsDefinition(action);
        }
        actionObjectExpr = actionsDefinition.getPrevSibling();
        actionObjectExpr.node.expression.right.properties.push(t.objectProperty(t.identifier(actionName), actionParams));
        if (actionHandlersDefinition == null) {
          siblings = action.getAllNextSiblings();
          lastAction = (ref = siblings[siblings.length - 1]) != null ? ref : action;
          lastAction.insertAfter(actionHandlersCode());
          actionHandlersDefinition = getActionHandlersDefinition(action);
        }
        actionHandlersDefinition.node.expression.right.properties.push(t.objectProperty(t.templateLiteral([t.templateElement({
          raw: '',
          cooked: ''
        }, false), t.templateElement({
          raw: '',
          cooked: ''
        }, true)], [t.memberExpression(t.identifier('Types'), t.identifier((0, _changeCase.constantCase)(actionName)))]), t.identifier(actionName), true));
      }
    }
  };
};

var _changeCase = require('change-case');

// Generated by CoffeeScript 2.1.1
var getActionHandlersDefinition, getActionsDefinition, isReducer;

isReducer = function (path) {
  return path.node.params.length === 2 && path.node.params[0].name === 'state' && (path.node.params[1].name === 'ctx' || path.node.params[1].type === 'ObjectPattern');
};

getActionsDefinition = function (action) {
  return action.getAllPrevSiblings().find(function (path) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
    return path.isExpressionStatement() && path.get('expression').isAssignmentExpression() && ((ref = path.node.expression.left) != null ? (ref1 = ref.properties) != null ? (ref2 = ref1[0]) != null ? (ref3 = ref2.key) != null ? ref3.name : void 0 : void 0 : void 0 : void 0) === 'Types' && ((ref4 = path.node.expression.left) != null ? (ref5 = ref4.properties) != null ? (ref6 = ref5[1]) != null ? (ref7 = ref6.key) != null ? ref7.name : void 0 : void 0 : void 0 : void 0) === 'Creators';
  });
};

getActionHandlersDefinition = function (action) {
  return action.getAllNextSiblings().find(function (path) {
    var ref;
    return path.isExpressionStatement() && path.get('expression').isAssignmentExpression() && ((ref = path.node.expression.left) != null ? ref.name : void 0) === 'ACTION_HANDLERS';
  });
};

;